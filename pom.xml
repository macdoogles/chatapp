<?xml version="1.0" encoding="UTF-8"?>

<project
    xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLScema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
        http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <artifactId>chatapp</artifactId>
  <groupId>com.snaps</groupId>
  <name>chatapp</name>
  <packaging>war</packaging>
  <version>0.0.3-SNAPSHOT</version>

  <description>
    Web application for chatting or something, using Angular and a host of
    other weird frameworks.
  </description>

  <properties>
    <maven.compiler.source>1.6</maven.compiler.source>
    <maven.compiler.target>1.6</maven.compiler.target>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <downloadSources>true</downloadSources>
    <downloadJavadocs>true</downloadJavadocs>
    <com.google.inject.version>3.0</com.google.inject.version>
    <com.sun.jersey.version>1.12</com.sun.jersey.version>
    <org.codehaus.jackson.version>1.9.5</org.codehaus.jackson.version>
  </properties>

  <dependencies>
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <version>10.0.1</version>
    </dependency>

    <dependency>
      <groupId>com.google.inject</groupId>
      <artifactId>guice</artifactId>
      <version>${com.google.inject.version}</version>
    </dependency>

    <dependency>
      <groupId>com.google.inject.extensions</groupId>
      <artifactId>guice-servlet</artifactId>
      <version>${com.google.inject.version}</version>
    </dependency>

    <dependency>
      <groupId>com.sun.jersey</groupId>
      <artifactId>jersey-json</artifactId>
      <version>${com.sun.jersey.version}</version>
    </dependency>

    <dependency>
      <groupId>com.sun.jersey</groupId>
      <artifactId>jersey-server</artifactId>
      <version>${com.sun.jersey.version}</version>
    </dependency>

    <dependency>
      <groupId>com.sun.jersey.contribs</groupId>
      <artifactId>jersey-guice</artifactId>
      <version>${com.sun.jersey.version}</version>
    </dependency>

    <dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-core-asl</artifactId>
      <version>${org.codehaus.jackson.version}</version>
    </dependency>

    <dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-jaxrs</artifactId>
      <version>${org.codehaus.jackson.version}</version>
    </dependency>

    <dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-mapper-asl</artifactId>
      <version>${org.codehaus.jackson.version}</version>
    </dependency>

    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>servlet-api</artifactId>
      <version>2.5</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>jstl</artifactId>
      <version>1.2</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>javax.servlet.jsp</groupId>
      <artifactId>jsp-api</artifactId>
      <version>2.2</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>1.6.4</version>
    </dependency>

    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>1.0.1</version>
    </dependency>

    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.10</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.easymock</groupId>
      <artifactId>easymockclassextension</artifactId>
      <version>3.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <finalName>${project.artifactId}</finalName>

    <plugins>
      <plugin>
        <groupId>org.mortbay.jetty</groupId>
        <artifactId>maven-jetty-plugin</artifactId>
        <version>6.1.12</version>
        <configuration>
          <webAppConfig>
            <contextPath>/${project.artifactId}</contextPath>
            <baseResource implementation="org.mortbay.resource.ResourceCollection">
              <resourcesAsCSV>src/main/webapp,src/main/javascript</resourcesAsCSV>
            </baseResource>
          </webAppConfig>
        </configuration>
      </plugin>

      <plugin>
        <!-- Run Closure javascript compiler. -->
        <!-- TODO: Use externs and ADVANCED_OPTIMIZATIONS when Angular supports it. -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>1.4</version>
        <executions>
          <execution>
            <phase>compile</phase>
            <configuration>
              <tasks>
                <mkdir dir="${basedir}/target/${project.artifactId}" />
                <echo>Compiling javascript files.</echo>

                <fileset id="srcjs" dir="${basedir}/src/main/javascript">
                  <include name="**/*.js" />

                  <!-- deps.js is not needed with compiled code in production.     -->
                  <exclude name="deps.js" />

                  <!-- The production compiled code does not use google's base.js. -->
                  <exclude name="goog/goog.js" />
                
                  <!-- require.js just defines goog.provide and goog.require which -->
                  <!-- are auto-magical values not needed in the production code.  -->
                  <exclude name="goog/require.js" />
                
                  <!-- Externs should be specified with extern flag                -->
                  <exclude name="**/*.extern.js" />
                </fileset>
                <pathconvert pathsep="  " property="jsfiles" refid="srcjs" />

                <exec executable="java" failOnError="true">
                  <arg value="-jar" />
                  <arg value="${basedir}/closure/compiler.jar" />
                  <arg value="--compilation_level=SIMPLE_OPTIMIZATIONS" />
                  <arg value="--charset=UTF-8" />
                  <arg value="--manage_closure_dependencies" />
                  <arg value="--generate_exports" />
                  <arg value="--warning_level=QUIET" />
                  <arg value="--js_output_file=${basedir}/target/${project.artifactId}/${project.artifactId}.js" />
                  <arg value="--js" />
                  <arg line="${jsfiles}" />
                </exec>

                <echo>Creating src/main/javascript/deps.js.</echo>
                <!-- deps.js is needed when running uncompiled source in jetty. -->
                <exec executable="python" failOnError="true">
                  <arg value="closure/depswriter.py" />
                  <arg value="--root=src/main/javascript" />
                  <arg value="--output=src/main/javascript/deps.js" />
                </exec>
              </tasks>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <!--  Javscript unit testing with Jasmine. -->
        <groupId>com.github.searls</groupId>
        <artifactId>jasmine-maven-plugin</artifactId>
        <version>1.1.0</version>
        <executions>
          <execution>
            <goals>
              <goal>test</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <jsSrcDir>${basedir}/src/main/javascript</jsSrcDir>
          <sourceExcludes>
            <exclude>deps.js</exclude>
            <exclude>goog/goog.js</exclude>
          </sourceExcludes>
          <sourceIncludes>
            <include>goog/require.js</include>
            <include>goog/export.js</include>
            <include>jquery/*.js</include>
            <include>underscore/*.js</include>
            <include>**/*.js</include>
          </sourceIncludes>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>

